"""
Django settings for auth project.

Generated by 'django-admin startproject' using Django 4.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^gm_t^_=0!#v4=dk7h&!yfs@tgl@ugu-bhenq(c#ov1n=+og)^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "*",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    # "django.contrib.gis",

    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "userauth",
    "corsheaders",
    "rest_framework.authtoken",
    "rest_framework",
    "subscription",
    "api",
    "api_monitor",
    "payments",
    "monitoring",
    "prediction",
    "apistatus",
    "contact",
    "newsletter",
    "monitor",
    "neural",
    "userprofile",
    # "support",
    "activity",
    "rigsdata",
    "reports",
    "settings",
    "gis",
    "leaflet",
    "config",
    "modelbuilder",
    "insurance",

]

GDAL_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu/libgdal.so"

# settings.py or base settings file

SILENCED_SYSTEM_CHECKS = ["models.W036"]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Add this line
    "corsheaders.middleware.CorsMiddleware",
    "activity.middleware.UserActivityLoggerMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "allauth.account.middleware.AccountMiddleware",  # Add this line
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    'config.middleware.TimezoneMiddleware',  # Adjust path to match your app

]


CORS_ALLOW_ALL_ORIGINS = False  # For development only, restrict in production

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Assuming your React app is served from this URL
    "http://flipsintel.org:8000",
    "http://flipsintel.org",
    "http://197.254.53.253:8000",
    "http://197.254.53.253",
    "https://flipsintel.org",
    "https://flipsintel.org:8000",
    "https://197.254.53.253",
]

ROOT_URLCONF = "auth.urls"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "rest_framework.permissions.AllowAny",
    ),
}

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)
LOGIN_REDIRECT_URL = "/"
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

SITE_ID = 1

# settings.py
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "support/ticket.html"



# settings.py
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Add this setting
NLTK_DATA_DIR = os.path.join(BASE_DIR, "nltk_data")


# Load the spaCy language model path
SPACY_MODEL_NAME = "en_core_web_sm"



USE_TZ = True  # Ensure timezone support is enabled
TIME_ZONE = 'Africa/Nairobi'  # Set the default timezone for display purposes

# Add email backend (for development, use console backend)
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Allauth settings
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

LOGIN_REDIRECT_URL = "/"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "auth.wsgi.application"
ASGI_APPLICATION = 'auth.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('redis', 6379)],  # Redis server
        },
    },
}

import os

OPENAI_API_KEY = os.getenv(
    "sk-Z9YmpK4oBj6-Vmm5Fb9tCT4UBhLn1C-LHOq_4vqFhIT3BlbkFJYXVsSszCfAnUJzBioOs_ZYIGTDT7vHdlYS4_SMDQkA"
)

# Configure Earth Engine
# import ee
# ee.Initialize()
# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
from pymongo.server_api import ServerApi  # Add this import

# settings.py

DATABASES = {
    "default": {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        "NAME": os.environ.get('DATABASE_NAME', 'flipsintel'),  # Default to 'flips'
        "USER": os.environ.get('DATABASE_USER', 'flipsintel'),  # Default to 'flipsintel'
        "PASSWORD": os.environ.get('DATABASE_PASSWORD', '1391'),  # Default to '1391'
        "HOST": os.environ.get('DATABASE_HOST', 'db'),  # Use 'db' to connect to the Docker container
        "PORT": os.environ.get('DATABASE_PORT', '5432'),  # Default PostgreSQL port
    },
}

# Security settings for HTTPS
SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
SECURE_HSTS_SECONDS = 31536000  # Enable HSTS for 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True  # Cookies only sent over HTTPS
CSRF_COOKIE_SECURE = True  # CSRF cookies only sent over HTTPS

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # For use with reverse proxies like Nginx
# Database routers
# DATABASE_ROUTERS = ['datasync.db_routers.PostgresRouter']

SUBSCRIPTION_API_URL = (
    "https://api.flipsintel.org/subscription/subscribe"  # or your actual API URL
)
# settings.py
import os

MAPBOX_ACCESS_TOKEN = os.getenv("MAPBOX_ACCESS_TOKEN", "pk.eyJ1Ijoic2tlZXBlcmxveWFsdGllIiwiYSI6ImNtMTczNW51cDBtOHEya3F2aGRsN3R0aDUifQ.P6XVHhObufeYZ1z6yFpXYw")


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "gugod254@gmail.com"
EMAIL_HOST_PASSWORD = "payurdbuxicjzkqf"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 500000  # Example value, adjust as necessary


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "~/static/"
MEDIA_URL = "/media/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STRIPE_SECRET_KEY = "sk_test_51PJX4sRweXlfThpixYaFV5DhPlsKsoxxWBojbD6PB6dhuCpPSe3WJzmtwZbQkuxBPSUrK9FoxNt5yloJp4r7Bz3700ljBTlaoO"
STRIPE_PUBLISHABLE_KEY = "pk_test_51PJX4sRweXlfThpiZ2SyDoIgZgvook188lEegSYESvvrWqxIxh7ZvTogSh09wWRwyLgSDJpnDtaIikSGrIIQgPJ1003F47MPUe"
STRIPE_ENDPOINT_SECRET = "your_webhook_secret"


# project/settings.py
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Pesapal API credentials
PESAPAL_CONSUMER_KEY = "qkio1BGGYAXTu2JOfm7XSXNruoZsrqEW"
PESAPAL_CONSUMER_SECRET = "osGQ364R49cXKeOYSpaOnT++rHs="
PESAPAL_CALLBACK_URL = "https://api.flipsintel.org/payments/payment-callback/"  # This should point to your payment callback endpoint


# Daraja (M-PESA) API Configuration
DARAJA_CONSUMER_KEY = os.getenv("DARAJA_CONSUMER_KEY", "your_daraja_consumer_key")
DARAJA_CONSUMER_SECRET = os.getenv(
    "DARAJA_CONSUMER_SECRET", "your_daraja_consumer_secret"
)
DARAJA_CALLBACK_URL = os.getenv(
    "DARAJA_CALLBACK_URL", "https://api.flipsintel.org/payments/payment_callback"
)
DARAJA_SHORT_CODE = os.getenv("DARAJA_SHORT_CODE", "your_short_code")
DARAJA_INITIATOR = os.getenv("DARAJA_INITIATOR", "your_initiator_username")
DARAJA_SECURITY_CREDENTIAL = os.getenv(
    "DARAJA_SECURITY_CREDENTIAL", "your_encrypted_security_credential"
)
