"""
Django settings for auth project.

Generated by 'django-admin startproject' using Django 4.1.12.
"""

from pathlib import Path
import os
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^gm_t^_=0!#v4=dk7h&!yfs@tgl@ugu-bhenq(c#ov1n=+og)^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "userauth",
    "corsheaders",
    "rest_framework.authtoken",
    "rest_framework",
    "subscription",
    "api",
    "api_monitor",
    "payments",
    "monitoring",
    "prediction",
    "apistatus",
    "contact",
    "newsletter",
    "monitor",
    "neural",
    "userprofile",
    "activity",
    "rigsdata",
    "reports",
    "settings",
    "gis",
    "leaflet",
    "config",
    "modelbuilder",
    "insurance",
]

GDAL_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu/libgdal.so"

SILENCED_SYSTEM_CHECKS = ["models.W036"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "activity.middleware.UserActivityLoggerMiddleware",
    "config.middleware.TimezoneMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://flipsintel.org:8000",
    "http://flipsintel.org",
    "http://197.254.53.253:8000",
    "http://197.254.53.253",
    "https://flipsintel.org",
    "https://flipsintel.org:8000",
    "https://197.254.53.253",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
CORS_ALLOW_METHODS = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "auth.urls"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

SITE_ID = 1
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"

# Google OAuth2 settings for allauth
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": "29044843643-87a8ble1vhtj1onsldk2db7hlaj9jk2f.apps.googleusercontent.com",
            "secret": "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",
            "key": ""
        },
        "SCOPE": ["profile", "email"],
        "AUTH_PARAMS": {"access_type": "online"},
    }
}

SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"

# Email settings with OAuth2
EMAIL_BACKEND = "auth.email_backend.GmailOAuth2EmailBackend"  # Custom backend
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
GOOGLE_OAUTH2_CLIENT_ID = "29044843643-87a8ble1vhtj1onsldk2db7hlaj9jk2f.apps.googleusercontent.com"
GOOGLE_OAUTH2_CLIENT_SECRET = "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"
GOOGLE_OAUTH2_TOKEN_URI = "https://oauth2.googleapis.com/token"
GOOGLE_OAUTH2_SCOPES = ["https://mail.google.com/"]
EMAIL_FROM = "info.flipsinteligence@gmail.com"  # The Gmail account to send emails from

# Store refresh token securely (e.g., in environment variable or file)
GOOGLE_OAUTH2_REFRESH_TOKEN = os.getenv("GOOGLE_OAUTH2_REFRESH_TOKEN", "")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "auth.wsgi.application"
ASGI_APPLICATION = "auth.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "sk-Z9YmpK4oBj6-Vmm5Fb9tCT4UBhLn1C-LHOq_4vqFhIT3BlbkFJYXVsSszCfAnUJzBioOs_ZYIGTDT7vHdlYS4_SMDQkA")

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("DATABASE_NAME", "flipsintel"),
        "USER": os.environ.get("DATABASE_USER", "flipsintel"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", "1391"),
        "HOST": os.environ.get("DATABASE_HOST", "db"),
        "PORT": os.environ.get("DATABASE_PORT", "5432"),
    },
}

SECURE_SSL_REDIRECT = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

SUBSCRIPTION_API_URL = "https://api.flipsintel.org/subscription/subscribe"

MAPBOX_ACCESS_TOKEN = os.getenv("MAPBOX_ACCESS_TOKEN", "pk.eyJ1Ijoic2tlZXBlcmxveWFsdGllIiwiYSI6ImNtMTczNW51cDBtOHEya3F2aGRsN3R0aDUifQ.P6XVHhObufeYZ1z6yFpXYw")

DATA_UPLOAD_MAX_NUMBER_FIELDS = 500000

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"
TIME_ZONE = "Africa/Nairobi"
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

STRIPE_SECRET_KEY = "sk_test_51PJX4sRweXlfThpixYaFV5DhPlsKsoxxWBojbD6PB6dhuCpPSe3WJzmtwZbQkuxBPSUrK9FoxNt5yloJp4r7Bz3700ljBTlaoO"
STRIPE_PUBLISHABLE_KEY = "pk_test_51PJX4sRweXlfThpiZ2SyDoIgZgvook188lEegSYESvvrWqxIxh7ZvTogSh09wWRwyLgSDJpnDtaIikSGrIIQgPJ1003F47MPUe"
STRIPE_ENDPOINT_SECRET = "your_webhook_secret"

CELERY_BROKER_URL = "redis://redis:6379/0"
CELERY_RESULT_BACKEND = "redis://redis:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"

PESAPAL_CONSUMER_KEY = "qkio1BGGYAXTu2JOfm7XSXNruoZsrqEW"
PESAPAL_CONSUMER_SECRET = "osGQ364R49cXKeOYSpaOnT++rHs="
PESAPAL_CALLBACK_URL = "https://api.flipsintel.org/payments/payment-callback/"

DARAJA_CONSUMER_KEY = os.getenv("DARAJA_CONSUMER_KEY", "your_daraja_consumer_key")
DARAJA_CONSUMER_SECRET = os.getenv("DARAJA_CONSUMER_SECRET", "your_daraja_consumer_secret")
DARAJA_CALLBACK_URL = os.getenv("DARAJA_CALLBACK_URL", "https://api.flipsintel.org/payments/payment_callback")
DARAJA_SHORT_CODE = os.getenv("DARAJA_SHORT_CODE", "your_short_code")
DARAJA_INITIATOR = os.getenv("DARAJA_INITIATOR", "your_initiator_username")
DARAJA_SECURITY_CREDENTIAL = os.getenv("DARAJA_SECURITY_CREDENTIAL", "your_encrypted_security_credential")

NLTK_DATA_DIR = os.path.join(BASE_DIR, "nltk_data")
SPACY_MODEL_NAME = "en_core_web_sm"