services:
  django:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - static_data:/app/static
      - media_data:/app/media
    expose:
      - "8000"
    command: >
      sh -c "python manage.py makemigrations userauth subscription api api_monitor payments monitoring prediction apistatus contact newsletter monitor neural userprofile activity rigsdata reports settings gis modelbuilder config insurance &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py add_rigs &&
             python manage.py add_subscription_plans &&
             python manage.py create_profiles &&
             python manage.py createprofile &&
             gunicorn --bind 0.0.0.0:8000 auth.wsgi:application"
    environment:
      - DEBUG=${DEBUG}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
      - CUDA_VISIBLE_DEVICES=""
      - DJANGO_SETTINGS_MODULE=auth.settings
    depends_on:
      - db
    restart: always
    networks:
      - backend

  redis:
    image: redis:alpine
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend

  data_sender:
    build:
      context: .
      dockerfile: data_sender.Dockerfile
    depends_on:
      - redis
      - django
      - db
    command: >
      sh -c "python sender/send_data.py"
    environment:
      - REDIS_URL=redis://redis:6379
      - API_HOST=http://django:8000
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=db
      - DATABASE_PORT=${DATABASE_PORT}
    restart: always
    networks:
      - backend

  db:
    image: postgis/postgis:13-3.1
    environment:
      - POSTGRES_DB=flipsintel
      - POSTGRES_USER=flipsintel
      - POSTGRES_PASSWORD=1391
    ports:
      - "5432:5432"
    expose:
      - "5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "flipsintel"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

volumes:
  static_data:
  media_data:
  postgres_data:

networks:
  backend:
    driver: bridge